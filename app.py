import os
import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.client.default import DefaultBotProperties  # ‚úÖ –¥–ª—è aiogram 3.7+
from dotenv import load_dotenv


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID_ENV = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

ADMIN_ID: Optional[int]
if ADMIN_ID_ENV and ADMIN_ID_ENV.strip():
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except ValueError:
        raise RuntimeError("ADMIN_ID must be a number (Telegram ID)")
else:
    ADMIN_ID = None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ aiogram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚úÖ —Ç–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è aiogram >= 3.7: parse_mode –∑–∞–¥–∞—ë–º —á–µ—Ä–µ–∑ default
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Lead(StatesGroup):
    name = State()
    phone = State()
    note = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ keyboards ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def contact_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ utils ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def normalize_phone(raw: str) -> Optional[str]:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫ –≤–∏–¥—É +7‚Ä¶ / +‚Ä¶ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç—Å–µ—è—Ç—å –º—É—Å–æ—Ä."""
    if not raw:
        return None
    digits = "".join(ch for ch in raw if ch.isdigit() or ch == "+")
    if not digits:
        return None
    # 8XXXXXXXXXX -> +7XXXXXXXXXX (—á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π –†–§)
    if digits.startswith("8") and len(digits) >= 11:
        digits = "+7" + digits[1:]
    if not digits.startswith("+"):
        digits = "+" + digits
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –¥–ª–∏–Ω–∞
    if sum(ch.isdigit() for ch in digits) < 7:
        return None
    return digits


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(Lead.name)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏–º –∑–∞—è–≤–∫—É.\n\n"
        "1) –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>."
    )


@dp.message(Lead.name, F.text)
async def got_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(Lead.phone)
    await message.answer(
        "2) –û—Å—Ç–∞–≤—å—Ç–µ <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>.\n\n"
        "–ú–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=contact_kb()
    )


@dp.message(Lead.phone, F.contact)
async def got_contact(message: Message, state: FSMContext):
    phone = normalize_phone(message.contact.phone_number)
    if not phone:
        await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7999‚Ä¶")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "3) –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Lead.phone, F.text)
async def got_phone_text(message: Message, state: FSMContext):
    phone = normalize_phone(message.text.strip())
    if not phone:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567.")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "3) –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Lead.note, F.text)
async def finalize(message: Message, state: FSMContext):
    note = message.text.strip()
    if note in {"-", "‚Äî", "–Ω–µ—Ç", "–Ω–µ –Ω—É–∂–Ω–æ"}:
        note = "-"

    data = await state.get_data()
    await state.clear()

    lead_card = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> üìù\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {note or '-'}\n\n"
        f"–û—Ç: @{message.from_user.username or message.from_user.id}"
    )

    if ADMIN_ID is not None:
        try:
            await bot.send_message(ADMIN_ID, lead_card)
        except Exception as e:
            # –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—Ö
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É:", e)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")


# –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
@dp.message(F.text)
async def fallback(message: Message, state: FSMContext):
    if await state.get_state() is None:
        await start(message, state)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entrypoint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    print("Bot started. Polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
