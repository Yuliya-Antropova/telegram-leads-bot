import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not ADMIN_ID:
    print("WARNING: ADMIN_ID is not set. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∑–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.")
else:
    ADMIN_ID = int(ADMIN_ID)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
def contact_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

WELCOME = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏–º –∑–∞—è–≤–∫—É.\n\n"
    "1) –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(WELCOME)

# –®–∞–≥ 1: –ò–º—è
@dp.message(F.text)
async def step_name(message: Message, state=None):
    if not hasattr(message.chat, "temp_data"):
        message.chat.temp_data = {}
    if "name" not in message.chat.temp_data:
        message.chat.temp_data["name"] = message.text.strip()
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=contact_keyboard())
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
    if "phone" not in message.chat.temp_data:
        phone = message.text.strip()
        if len(phone) < 5:
            await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.")
            return
        message.chat.temp_data["phone"] = phone
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):", reply_markup=None)
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if "note" not in message.chat.temp_data:
        message.chat.temp_data["note"] = message.text.strip()
        data = message.chat.temp_data

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        lead = (
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üìù\n\n"
            f"–ò–º—è: {data.get('name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('note') or '-'}\n\n"
            f"–û—Ç: @{message.from_user.username or message.from_user.id}"
        )

        if isinstance(ADMIN_ID, int):
            try:
                await bot.send_message(ADMIN_ID, lead)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É:", e)

        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ üôå")
        message.chat.temp_data = {}  # –æ—á–∏—â–∞–µ–º
        return

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message(F.contact)
async def handle_contact(message: Message):
    if not hasattr(message.chat, "temp_data"):
        message.chat.temp_data = {}
    message.chat.temp_data["phone"] = message.contact.phone_number
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):", reply_markup=None)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
