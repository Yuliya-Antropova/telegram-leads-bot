import os
import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üìå –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π chat_id –≥—Ä—É–ø–ø—ã
GROUP_CHAT_ID = -4716856992

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ aiogram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Lead(StatesGroup):
    name = State()
    contact_method = State()
    phone = State()
    note = State()

def contact_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def method_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ó–≤–æ–Ω–æ–∫")],
            [KeyboardButton(text="üí¨ Telegram")],
            [KeyboardButton(text="üü¢ WhatsApp")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def normalize_phone(raw: str) -> Optional[str]:
    if not raw:
        return None
    digits = "".join(ch for ch in raw if ch.isdigit() or ch == "+")
    if not digits:
        return None
    if digits.startswith("8") and len(digits) >= 11:
        digits = "+7" + digits[1:]
    if not digits.startswith("+"):
        digits = "+" + digits
    if sum(ch.isdigit() for ch in digits) < 7:
        return None
    return digits

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(Lead.name)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã <b>Nigma Interior</b>.\n\n"
        "–ß—Ç–æ–±—ã –º—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –í–∞–º–∏, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?"
    )

@dp.message(Lead.name, F.text)
async def got_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(Lead.contact_method)
    await message.answer(
        "üìå –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        reply_markup=method_kb()
    )

@dp.message(Lead.contact_method, F.text)
async def got_method(message: Message, state: FSMContext):
    await state.update_data(contact_method=message.text.strip())
    await state.set_state(Lead.phone)
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.",
        reply_markup=contact_kb()
    )

@dp.message(Lead.phone, F.contact)
async def got_contact(message: Message, state: FSMContext):
    phone = normalize_phone(message.contact.phone_number)
    if not phone:
        await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7999‚Ä¶")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "üìù –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –ê –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Lead.phone, F.text)
async def got_phone_text(message: Message, state: FSMContext):
    phone = normalize_phone(message.text.strip())
    if not phone:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567.")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "üìù –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –ê –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Lead.note, F.text)
async def finalize(message: Message, state: FSMContext):
    note = message.text.strip()
    if not note or note in {"-", "‚Äî"}:
        note = "-"

    data = await state.get_data()
    await state.clear()

    lead_card = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> üìù\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {note}\n\n"
        f"–û—Ç: @{message.from_user.username or message.from_user.id}"
    )

    try:
        await bot.send_message(GROUP_CHAT_ID, lead_card)
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É:", e)

    await message.answer("ü§ù –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º –í–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–º.")

@dp.message(F.text)
async def fallback(message: Message, state: FSMContext):
    if await state.get_state() is None:
        await start(message, state)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entrypoint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    print("Bot started. Polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
