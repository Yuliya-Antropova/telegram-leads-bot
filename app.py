import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not ADMIN_ID:
    print("WARNING: ADMIN_ID is not set. Bot will run, but leads won't be forwarded.")
else:
    ADMIN_ID = int(ADMIN_ID)

bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ---- FSM ----
class Lead(StatesGroup):
    name = State()
    phone = State()
    note = State()

# ---- Keyboards ----
def contact_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# ---- Utils ----
def normalize_phone(raw: str) -> str | None:
    if not raw:
        return None
    # –æ—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –∏ +
    digits = ''.join(ch for ch in raw if ch.isdigit() or ch == '+')
    if not digits:
        return None
    # –ø—Ä–∏–≤–µ—Å—Ç–∏ 8XXXXXXXXXX -> +7XXXXXXXXXX (–¥–ª—è –†–§)
    if digits.startswith('8') and len(digits) >= 11:
        digits = '+7' + digits[1:]
    if not digits.startswith('+'):
        digits = '+' + digits
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    if len(''.join(ch for ch in digits if ch.isdigit())) < 7:
        return None
    return digits

# ---- Handlers ----
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(Lead.name)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏–º –∑–∞—è–≤–∫—É.\n\n"
        "1) –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>.",
    )

@dp.message(Lead.name, F.text)
async def got_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(Lead.phone)
    await message.answer(
        "2) –û—Å—Ç–∞–≤—å—Ç–µ <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>.\n\n"
        "–ú–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=contact_keyboard()
    )

@dp.message(Lead.phone, F.contact)
async def got_contact(message: Message, state: FSMContext):
    phone = normalize_phone(message.contact.phone_number)
    if not phone:
        await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7999‚Ä¶")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "3) –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Lead.phone, F.text)
async def got_phone_text(message: Message, state: FSMContext):
    phone = normalize_phone(message.text.strip())
    if not phone:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567.")
        return
    await state.update_data(phone=phone)
    await state.set_state(Lead.note)
    await message.answer(
        "3) –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Lead.note, F.text)
async def finalize(message: Message, state: FSMContext):
    note = message.text.strip()
    if note in {"-", "‚Äî", "–Ω–µ—Ç", "–Ω–µ –Ω—É–∂–Ω–æ"}:
        note = "-"
    await state.update_data(note=note)

    data = await state.get_data()
    await state.clear()

    lead_card = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> üìù\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('note') or '-'}\n\n"
        f"–û—Ç: @{message.from_user.username or message.from_user.id}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if isinstance(ADMIN_ID, int):
        try:
            await bot.send_message(ADMIN_ID, lead_card)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É:", e)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ
@dp.message(F.text)
async def fallback(message: Message, state: FSMContext):
    s = await state.get_state()
    if s is None:
        await start(message, state)

async def main():
    print("Bot started. Polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
